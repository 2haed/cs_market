import asyncio
import math
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from config import TOKEN, DB_CONFIG, CS_KNIVES_LC, CS_GLOVES_LC
from main import parse_items, get_top_10_rating_items, adjust_prices, save_user_watch_items
from typing import Optional, List, Dict
import psycopg2
import asyncio
import logging
from aiogram.fsm.state import StatesGroup, State
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart, Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup


bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()


user_states = {}
user_selected_subtypes = {}

class WatchItemStates(StatesGroup):
    waiting_for_item_text = State()

# --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ every 5 minutes ---
def schedule_parsing():
    result = parse_items("both")
    print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] Scheduled parsing result:\n{result}")

def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –ü–∞—Ä—Å–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data="menu_parse")],
        [InlineKeyboardButton(text="üìä –¢–æ–ø-10 –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É", callback_data="menu_top10")],
        [InlineKeyboardButton(text="‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ", callback_data="adjust_prices")],
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data="save_items")]  # –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã"
    ])

# --- –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ ---
def type_selector(prefix: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî™ Knife", callback_data=f"{prefix}_knife"),
            InlineKeyboardButton(text="üß§ Glove", callback_data=f"{prefix}_glove"),
        ],
        [InlineKeyboardButton(text="üåÄ Both", callback_data=f"{prefix}_both")]
    ])

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@dp.callback_query(F.data.in_({"menu_parse", "menu_top10"}))
async def main_menu_handler(call: CallbackQuery, state: FSMContext):
    await call.answer()

    if call.data == "menu_parse":
        await call.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:",
            reply_markup=type_selector("parse"),
            parse_mode=ParseMode.HTML
        )

    elif call.data == "menu_top10":
        await call.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –¢–û–ü-10:",
            reply_markup=type_selector("top"),
            parse_mode=ParseMode.HTML
        )

    elif call.data == "menu_save_items":
        await call.message.edit_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ):",
            parse_mode=ParseMode.HTML
        )
        await state.set_state(WatchItemStates.waiting_for_item_text)


# –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã"
@router.message(Command("watch_items"))
async def watch_items_command(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:")
    await state.set_state(WatchItemStates.waiting_for_item_text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(WatchItemStates.waiting_for_item_text)
async def handle_watch_item_input(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    query_text = message.text.strip()

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    saved_items = await save_user_watch_items(user_id=user_id, search_text=query_text, conn=DB_CONFIG)

    if saved_items:
        await message.answer(
            f"–î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ:\n\n" + "\n".join(saved_items)
        )
    else:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
    await state.clear()


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ ---
@dp.callback_query(F.data.startswith("parse_"))
async def parse_callback(call: CallbackQuery):
    await call.answer()
    item_type = call.data.removeprefix("parse_")
    msg = await call.message.edit_text(f"‚è≥ –ó–∞–ø—É—â–µ–Ω –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è: <b>{item_type}</b>...", parse_mode=ParseMode.HTML)
    result = parse_items(item_type)
    await msg.edit_text(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è <b>{item_type}</b>:\n{result}", parse_mode=ParseMode.HTML)

@dp.callback_query(F.data == "adjust_prices")
async def handle_adjust_prices(call: CallbackQuery):
    result_text = adjust_prices()
    if result_text:
        
        msg = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω:\n{result_text}"
    else:
        msg = f"–û–±–Ω–æ–≤–ª—è—Ç—å –Ω–µ—á–µ–≥–æ"
    await call.message.answer(msg, parse_mode=ParseMode.HTML)
    await call.answer()

@dp.callback_query(F.data.startswith("top_"))
async def top_item_type_chosen(call: CallbackQuery):
    await call.answer()
    item_type = call.data.removeprefix("top_")
    user_id = call.from_user.id
    
    if item_type == "both":
        user_states[user_id] = {
            "step": "waiting_min_price",
            "item_type": item_type,
            "price_min": None,
            "price_max": None,
        }
        await call.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø: <b>Both</b>\n–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '.' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
            parse_mode=ParseMode.HTML
        )
        return
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ç–∏–ø–æ–≤ –ø—É—Å—Ç—ã–º –Ω–∞–±–æ—Ä–æ–º
    user_selected_subtypes[user_id] = set()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id] = {
        "step": "selecting_subtypes",
        "item_type": item_type,
        "price_min": None,
        "price_max": None,
    }

    kb = build_subtype_keyboard(item_type, user_selected_subtypes[user_id])
    await call.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø: <b>{item_type.capitalize()}</b>\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ç–∏–ø–æ–≤ (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å/—Å–Ω—è—Ç—å –≤—ã–±–æ—Ä):",
        parse_mode=ParseMode.HTML,
        reply_markup=kb
    )

def build_subtype_keyboard(item_type: str, selected: set):
    if item_type == "knife":
        options = CS_KNIVES_LC
    elif item_type == "glove":
        options = CS_GLOVES_LC
    else:
        # –î–ª—è both –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ –Ω–æ–∂–∏ –∏ –ø–µ—Ä—á–∞—Ç–∫–∏, –º–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–ø–∏—Å–∫–∏
        options = CS_KNIVES_LC + CS_GLOVES_LC

    keyboard = []
    for subtype in options:
        checked = "‚úÖ" if subtype in selected else "‚òëÔ∏è"
        keyboard.append([
            InlineKeyboardButton(text=f"{checked} {subtype}", callback_data=f"subtype_toggle|{subtype}")
        ])

    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    keyboard.append([InlineKeyboardButton(text="‚úÖ –î–∞–ª—å—à–µ", callback_data="subtype_done")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ø–æ–¥—Ç–∏–ø—ã
@dp.callback_query(F.data.startswith("subtype_toggle|"))
async def subtype_toggle_handler(call: CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    if user_id not in user_selected_subtypes:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å

    subtype = call.data.removeprefix("subtype_toggle|")
    selected = user_selected_subtypes[user_id]

    if subtype in selected:
        selected.remove(subtype)
    else:
        selected.add(subtype)

    # –ü–æ–ª—É—á–∞–µ–º item_type –∏–∑ user_states
    item_type = user_states.get(user_id, {}).get("item_type", "both")

    kb = build_subtype_keyboard(item_type, selected)
    await call.message.edit_reply_markup(reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ç–∏–ø–æ–≤
@dp.callback_query(F.data == "subtype_done")
async def subtype_done_handler(call: CallbackQuery):
    await call.answer()
    user_id = call.from_user.id

    if user_id not in user_states or user_id not in user_selected_subtypes:
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–∏–ø—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id]["selected_subtypes"] = list(user_selected_subtypes[user_id])
    user_states[user_id]["step"] = "waiting_min_price"

    # –û—á–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—ã–±–æ—Ä–∞
    user_selected_subtypes.pop(user_id, None)

    await call.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '.' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        parse_mode=ParseMode.HTML
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å —É—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–∏–ø—ã –≤ –∑–∞–ø—Ä–æ—Å–µ
@dp.message()
async def price_input_handler(message: Message):
    user_id = message.from_user.id
    if user_id not in user_states:
        return

    state = user_states[user_id]
    step = state.get("step")
    text = message.text.strip()

    if step == "waiting_min_price":
        if text == ".":
            state["price_min"] = None
        else:
            try:
                state["price_min"] = float(text.replace(",", "."))
            except ValueError:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '.' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã.")
                return
        state["step"] = "waiting_max_price"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '.' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")

    elif step == "waiting_max_price":
        if text == ".":
            state["price_max"] = None
        else:
            try:
                state["price_max"] = float(text.replace(",", "."))
            except ValueError:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '.' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã.")
                return

        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ç–∏–ø–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        selected_subtypes = state.get("selected_subtypes", None)
        if selected_subtypes:
            # –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –≤ SQL –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—é —Å OR –ø–æ –ø–æ–¥—Ç–∏–ø–∞–º
            # –ó–¥–µ—Å—å –ø–µ—Ä–µ–¥–∞–¥–∏–º —Å–ø–∏—Å–æ–∫, –∞ –≤ SQL —Å–¥–µ–ª–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —á–µ—Ä–µ–∑ ILIKE ANY(array[...])
            # –ü–æ—ç—Ç–æ–º—É –Ω–∞–¥–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å get_top_10_rating_items, —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞–ª–∞ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–∏–ø–æ–≤
            rows = get_top_10_rating_items(
                conn_params=DB_CONFIG,
                price_min=state["price_min"],
                price_max=state["price_max"],
                item_type=state["item_type"],
                subtype_list=selected_subtypes
            )
        else:
            rows = get_top_10_rating_items(
                conn_params=DB_CONFIG,
                price_min=state["price_min"],
                price_max=state["price_max"],
                item_type=state["item_type"],
                subtype_list=None
            )

        if not rows:
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
        else:
            response = f"<b>üî• –¢–û–ü 10 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ‚Äî {state['item_type'].capitalize()}:</b>\n\n"
            for i, row in enumerate(rows, start=1):
                ros = row.get('ros')
                ros_str = f"{ros} %" if ros is not None else "‚Äî"
                response += (
                    f"<b>{i}</b>. <code>{row['–ü—Ä–µ–¥–º–µ—Ç']}</code>\n"
                    f"üí∞ –ú–∞—Ä–∫–µ—Ç: {row['–ú–∞—Ä–∫–µ—Ç –¶–µ–Ω–∞']} $\n"
                    f"üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {row['–¢–µ–∫—É—â–∞—è –ú–∞—Ä–∫–µ—Ç –¶–µ–Ω–∞']} $\n"
                    f"ü¶ä –õ–∏—Å–°–∫–∏–Ω—Å: {row['–õ–∏—Å—Å–∫–∏–Ω—Å –¶–µ–Ω–∞']} $\n"
                    f"üéØ ROS: {ros_str}\n"
                    f"üìä –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {row['–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å']} $\n"
                    f"üìà –¢–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å: {row['–¢–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å']} $\n"
                    f"üõí –ü—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7–¥: {row['–ü—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π']}\n"
                    f"üîó <a href=\"{row['market_url']}\">–ú–∞—Ä–∫–µ—Ç</a> | <a href=\"{row['lisskins_url']}\">–õ–∏—Å–°–∫–∏–Ω—Å</a>\n\n"
                )
            await message.answer(response, parse_mode=ParseMode.HTML)

        user_states.pop(user_id, None)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(schedule_parsing, "interval", minutes=5)
    scheduler.start()

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())